<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        注意：mybatis核心配置文件中，标签的顺序：
            properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
            reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?
    -->

    <!--引入外部配置文件-->
    <properties resource="jdbc.properties"/>

    <typeAliases>
        <!--
            typeAlias：设置类型别名，不区分大小写
                属性：
                    type：设置需要设置别名的类型
                    alias：设置某个类型的别名，若设置该属性则以该值为准，若不设置则以类型名称为准且不区分大小写
        -->
        <!--<typeAlias type="com.qc.demo01.entity.User" alias="User"/>-->

        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->
        <package name="com.qc.demo01.entity"/>
    </typeAliases>

    <!--配置连接数据库的环境-->
    <!--
        environments：配置多个连接数据库环境
        属性：
            default：设置默认使用的环境的id
    -->
    <environments default="development">
        <!--
            environment：配置某个具体的环境
            属性：
                id：表示连接数据库的环境的唯一标识，不能重复
        -->
        <environment id="development">
            <!--
                transactionManager：设置事务管理的方式
                属性：
                    type：
                        1. JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理
                        2. MANAGED：表示被管理，例如Spring
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource：配置数据源
                属性：
                    type：设置数据源的类型
                        1. POOLED：表示使用数据库连接池缓存数据库连接
                        2. UNPOOLED：表示不使用数据库连接池
                        3. JNDI：表示使用上下文中的数据源
            -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url"
                          value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url"
                          value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--引入映射文件-->
    <mappers>
        <!--<mapper resource="mapper/UserMapper.xml"/>-->

        <!--
            以包为单位引入映射文件的两个要求：
                1. mapper接口所在的包要和映射文件所在的包一致
                2. mapper接口要和映射文件的名称一致【只要名字一样就行，大小写不区分】
        -->
        <package name="com.qc.demo01.mapper"/>
    </mappers>
</configuration>